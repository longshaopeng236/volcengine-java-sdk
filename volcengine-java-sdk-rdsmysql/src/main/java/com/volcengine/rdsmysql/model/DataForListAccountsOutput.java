/*
 * rds_mysql
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.rdsmysql.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.rdsmysql.model.DBPrivilegeForListAccountsOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DataForListAccountsOutput
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-19T10:12:05.954803+08:00[Asia/Shanghai]")
public class DataForListAccountsOutput {
  @SerializedName("AccountName")
  private String accountName = null;

  /**
   * Gets or Sets accountStatus
   */
  @JsonAdapter(AccountStatusEnum.Adapter.class)
  public enum AccountStatusEnum {
    AVAILABLE("Available"),
    UNAVAILABLE("Unavailable");

    private String value;

    AccountStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AccountStatusEnum fromValue(String input) {
      for (AccountStatusEnum b : AccountStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AccountStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountStatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AccountStatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AccountStatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("AccountStatus")
  private AccountStatusEnum accountStatus = null;

  /**
   * Gets or Sets accountType
   */
  @JsonAdapter(AccountTypeEnum.Adapter.class)
  public enum AccountTypeEnum {
    GRANT("Grant"),
    NORMAL("Normal"),
    SUPER("Super");

    private String value;

    AccountTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AccountTypeEnum fromValue(String input) {
      for (AccountTypeEnum b : AccountTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AccountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AccountTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AccountTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("AccountType")
  private AccountTypeEnum accountType = null;

  @SerializedName("DBPrivileges")
  private List<DBPrivilegeForListAccountsOutput> dbPrivileges = null;

  public DataForListAccountsOutput accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

   /**
   * Get accountName
   * @return accountName
  **/
  @Schema(description = "")
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }

  public DataForListAccountsOutput accountStatus(AccountStatusEnum accountStatus) {
    this.accountStatus = accountStatus;
    return this;
  }

   /**
   * Get accountStatus
   * @return accountStatus
  **/
  @Schema(description = "")
  public AccountStatusEnum getAccountStatus() {
    return accountStatus;
  }

  public void setAccountStatus(AccountStatusEnum accountStatus) {
    this.accountStatus = accountStatus;
  }

  public DataForListAccountsOutput accountType(AccountTypeEnum accountType) {
    this.accountType = accountType;
    return this;
  }

   /**
   * Get accountType
   * @return accountType
  **/
  @Schema(description = "")
  public AccountTypeEnum getAccountType() {
    return accountType;
  }

  public void setAccountType(AccountTypeEnum accountType) {
    this.accountType = accountType;
  }

  public DataForListAccountsOutput dbPrivileges(List<DBPrivilegeForListAccountsOutput> dbPrivileges) {
    this.dbPrivileges = dbPrivileges;
    return this;
  }

  public DataForListAccountsOutput addDbPrivilegesItem(DBPrivilegeForListAccountsOutput dbPrivilegesItem) {
    if (this.dbPrivileges == null) {
      this.dbPrivileges = new ArrayList<DBPrivilegeForListAccountsOutput>();
    }
    this.dbPrivileges.add(dbPrivilegesItem);
    return this;
  }

   /**
   * Get dbPrivileges
   * @return dbPrivileges
  **/
  @Valid
  @Schema(description = "")
  public List<DBPrivilegeForListAccountsOutput> getDbPrivileges() {
    return dbPrivileges;
  }

  public void setDbPrivileges(List<DBPrivilegeForListAccountsOutput> dbPrivileges) {
    this.dbPrivileges = dbPrivileges;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataForListAccountsOutput dataForListAccountsOutput = (DataForListAccountsOutput) o;
    return Objects.equals(this.accountName, dataForListAccountsOutput.accountName) &&
        Objects.equals(this.accountStatus, dataForListAccountsOutput.accountStatus) &&
        Objects.equals(this.accountType, dataForListAccountsOutput.accountType) &&
        Objects.equals(this.dbPrivileges, dataForListAccountsOutput.dbPrivileges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountName, accountStatus, accountType, dbPrivileges);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataForListAccountsOutput {\n");
    
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    accountStatus: ").append(toIndentedString(accountStatus)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    dbPrivileges: ").append(toIndentedString(dbPrivileges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
