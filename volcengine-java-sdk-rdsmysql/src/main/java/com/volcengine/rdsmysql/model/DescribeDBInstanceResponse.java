/*
 * rds_mysql
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.rdsmysql.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.rdsmysql.model.BasicInfoForDescribeDBInstanceOutput;
import com.volcengine.rdsmysql.model.ConnectionInfoForDescribeDBInstanceOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DescribeDBInstanceResponse
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-15T17:10:46.453185+08:00[Asia/Shanghai]")
public class DescribeDBInstanceResponse {
  @SerializedName("BasicInfo")
  private BasicInfoForDescribeDBInstanceOutput basicInfo = null;

  @SerializedName("ConnectionInfo")
  private ConnectionInfoForDescribeDBInstanceOutput connectionInfo = null;

  @SerializedName("DataSyncMode")
  private String dataSyncMode = null;

  @SerializedName("StorageType")
  private String storageType = null;

  public DescribeDBInstanceResponse basicInfo(BasicInfoForDescribeDBInstanceOutput basicInfo) {
    this.basicInfo = basicInfo;
    return this;
  }

   /**
   * Get basicInfo
   * @return basicInfo
  **/
  @Valid
  @Schema(description = "")
  public BasicInfoForDescribeDBInstanceOutput getBasicInfo() {
    return basicInfo;
  }

  public void setBasicInfo(BasicInfoForDescribeDBInstanceOutput basicInfo) {
    this.basicInfo = basicInfo;
  }

  public DescribeDBInstanceResponse connectionInfo(ConnectionInfoForDescribeDBInstanceOutput connectionInfo) {
    this.connectionInfo = connectionInfo;
    return this;
  }

   /**
   * Get connectionInfo
   * @return connectionInfo
  **/
  @Valid
  @Schema(description = "")
  public ConnectionInfoForDescribeDBInstanceOutput getConnectionInfo() {
    return connectionInfo;
  }

  public void setConnectionInfo(ConnectionInfoForDescribeDBInstanceOutput connectionInfo) {
    this.connectionInfo = connectionInfo;
  }

  public DescribeDBInstanceResponse dataSyncMode(String dataSyncMode) {
    this.dataSyncMode = dataSyncMode;
    return this;
  }

   /**
   * Get dataSyncMode
   * @return dataSyncMode
  **/
  @Schema(description = "")
  public String getDataSyncMode() {
    return dataSyncMode;
  }

  public void setDataSyncMode(String dataSyncMode) {
    this.dataSyncMode = dataSyncMode;
  }

  public DescribeDBInstanceResponse storageType(String storageType) {
    this.storageType = storageType;
    return this;
  }

   /**
   * Get storageType
   * @return storageType
  **/
  @Schema(description = "")
  public String getStorageType() {
    return storageType;
  }

  public void setStorageType(String storageType) {
    this.storageType = storageType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDBInstanceResponse describeDBInstanceResponse = (DescribeDBInstanceResponse) o;
    return Objects.equals(this.basicInfo, describeDBInstanceResponse.basicInfo) &&
        Objects.equals(this.connectionInfo, describeDBInstanceResponse.connectionInfo) &&
        Objects.equals(this.dataSyncMode, describeDBInstanceResponse.dataSyncMode) &&
        Objects.equals(this.storageType, describeDBInstanceResponse.storageType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basicInfo, connectionInfo, dataSyncMode, storageType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDBInstanceResponse {\n");
    
    sb.append("    basicInfo: ").append(toIndentedString(basicInfo)).append("\n");
    sb.append("    connectionInfo: ").append(toIndentedString(connectionInfo)).append("\n");
    sb.append("    dataSyncMode: ").append(toIndentedString(dataSyncMode)).append("\n");
    sb.append("    storageType: ").append(toIndentedString(storageType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
