/*
 * rds_mysql
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.rdsmysql.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CreateBackupRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-14T18:23:11.413715+08:00[Asia/Shanghai]")
public class CreateBackupRequest {
  /**
   * Gets or Sets backupDataType
   */
  @JsonAdapter(BackupDataTypeEnum.Adapter.class)
  public enum BackupDataTypeEnum {
    DATA("Data"),
    LOG("Log");

    private String value;

    BackupDataTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BackupDataTypeEnum fromValue(String input) {
      for (BackupDataTypeEnum b : BackupDataTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BackupDataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupDataTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public BackupDataTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return BackupDataTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("BackupDataType")
  private BackupDataTypeEnum backupDataType = null;

  /**
   * Gets or Sets backupMode
   */
  @JsonAdapter(BackupModeEnum.Adapter.class)
  public enum BackupModeEnum {
    FULL("Full"),
    INCREMENT("Increment");

    private String value;

    BackupModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BackupModeEnum fromValue(String input) {
      for (BackupModeEnum b : BackupModeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BackupModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupModeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public BackupModeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return BackupModeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("BackupMode")
  private BackupModeEnum backupMode = null;

  /**
   * Gets or Sets backupStrategy
   */
  @JsonAdapter(BackupStrategyEnum.Adapter.class)
  public enum BackupStrategyEnum {
    DATABASE("Database"),
    INSTANCE("Instance");

    private String value;

    BackupStrategyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BackupStrategyEnum fromValue(String input) {
      for (BackupStrategyEnum b : BackupStrategyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BackupStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupStrategyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public BackupStrategyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return BackupStrategyEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("BackupStrategy")
  private BackupStrategyEnum backupStrategy = null;

  /**
   * Gets or Sets backupType
   */
  @JsonAdapter(BackupTypeEnum.Adapter.class)
  public enum BackupTypeEnum {
    LOGICAL("Logical"),
    PHYSICAL("Physical");

    private String value;

    BackupTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BackupTypeEnum fromValue(String input) {
      for (BackupTypeEnum b : BackupTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BackupTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public BackupTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return BackupTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("BackupType")
  private BackupTypeEnum backupType = null;

  @SerializedName("InstanceId")
  private String instanceId = null;

  public CreateBackupRequest backupDataType(BackupDataTypeEnum backupDataType) {
    this.backupDataType = backupDataType;
    return this;
  }

   /**
   * Get backupDataType
   * @return backupDataType
  **/
  @Schema(description = "")
  public BackupDataTypeEnum getBackupDataType() {
    return backupDataType;
  }

  public void setBackupDataType(BackupDataTypeEnum backupDataType) {
    this.backupDataType = backupDataType;
  }

  public CreateBackupRequest backupMode(BackupModeEnum backupMode) {
    this.backupMode = backupMode;
    return this;
  }

   /**
   * Get backupMode
   * @return backupMode
  **/
  @Schema(description = "")
  public BackupModeEnum getBackupMode() {
    return backupMode;
  }

  public void setBackupMode(BackupModeEnum backupMode) {
    this.backupMode = backupMode;
  }

  public CreateBackupRequest backupStrategy(BackupStrategyEnum backupStrategy) {
    this.backupStrategy = backupStrategy;
    return this;
  }

   /**
   * Get backupStrategy
   * @return backupStrategy
  **/
  @Schema(description = "")
  public BackupStrategyEnum getBackupStrategy() {
    return backupStrategy;
  }

  public void setBackupStrategy(BackupStrategyEnum backupStrategy) {
    this.backupStrategy = backupStrategy;
  }

  public CreateBackupRequest backupType(BackupTypeEnum backupType) {
    this.backupType = backupType;
    return this;
  }

   /**
   * Get backupType
   * @return backupType
  **/
  @Schema(description = "")
  public BackupTypeEnum getBackupType() {
    return backupType;
  }

  public void setBackupType(BackupTypeEnum backupType) {
    this.backupType = backupType;
  }

  public CreateBackupRequest instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

   /**
   * Get instanceId
   * @return instanceId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBackupRequest createBackupRequest = (CreateBackupRequest) o;
    return Objects.equals(this.backupDataType, createBackupRequest.backupDataType) &&
        Objects.equals(this.backupMode, createBackupRequest.backupMode) &&
        Objects.equals(this.backupStrategy, createBackupRequest.backupStrategy) &&
        Objects.equals(this.backupType, createBackupRequest.backupType) &&
        Objects.equals(this.instanceId, createBackupRequest.instanceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupDataType, backupMode, backupStrategy, backupType, instanceId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBackupRequest {\n");
    
    sb.append("    backupDataType: ").append(toIndentedString(backupDataType)).append("\n");
    sb.append("    backupMode: ").append(toIndentedString(backupMode)).append("\n");
    sb.append("    backupStrategy: ").append(toIndentedString(backupStrategy)).append("\n");
    sb.append("    backupType: ").append(toIndentedString(backupType)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
