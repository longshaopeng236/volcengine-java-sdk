/*
 * rds_mysql
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.rdsmysql.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ListBackupsRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-14T18:23:11.413715+08:00[Asia/Shanghai]")
public class ListBackupsRequest {
  /**
   * Gets or Sets backupDataType
   */
  @JsonAdapter(BackupDataTypeEnum.Adapter.class)
  public enum BackupDataTypeEnum {
    DATA("Data"),
    LOG("Log");

    private String value;

    BackupDataTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BackupDataTypeEnum fromValue(String input) {
      for (BackupDataTypeEnum b : BackupDataTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BackupDataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupDataTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public BackupDataTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return BackupDataTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("BackupDataType")
  private BackupDataTypeEnum backupDataType = null;

  /**
   * Gets or Sets backupStatus
   */
  @JsonAdapter(BackupStatusEnum.Adapter.class)
  public enum BackupStatusEnum {
    FAILED("Failed"),
    RUNNING("Running"),
    SUCCESS("Success");

    private String value;

    BackupStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BackupStatusEnum fromValue(String input) {
      for (BackupStatusEnum b : BackupStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BackupStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupStatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public BackupStatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return BackupStatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("BackupStatus")
  private BackupStatusEnum backupStatus = null;

  @SerializedName("EndTime")
  private String endTime = null;

  @SerializedName("InstanceId")
  private String instanceId = null;

  @SerializedName("Limit")
  private Integer limit = null;

  @SerializedName("Offset")
  private Integer offset = null;

  @SerializedName("StartTime")
  private String startTime = null;

  public ListBackupsRequest backupDataType(BackupDataTypeEnum backupDataType) {
    this.backupDataType = backupDataType;
    return this;
  }

   /**
   * Get backupDataType
   * @return backupDataType
  **/
  @Schema(description = "")
  public BackupDataTypeEnum getBackupDataType() {
    return backupDataType;
  }

  public void setBackupDataType(BackupDataTypeEnum backupDataType) {
    this.backupDataType = backupDataType;
  }

  public ListBackupsRequest backupStatus(BackupStatusEnum backupStatus) {
    this.backupStatus = backupStatus;
    return this;
  }

   /**
   * Get backupStatus
   * @return backupStatus
  **/
  @Schema(description = "")
  public BackupStatusEnum getBackupStatus() {
    return backupStatus;
  }

  public void setBackupStatus(BackupStatusEnum backupStatus) {
    this.backupStatus = backupStatus;
  }

  public ListBackupsRequest endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @Schema(description = "")
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }

  public ListBackupsRequest instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

   /**
   * Get instanceId
   * @return instanceId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }

  public ListBackupsRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @Schema(description = "")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  public ListBackupsRequest offset(Integer offset) {
    this.offset = offset;
    return this;
  }

   /**
   * Get offset
   * @return offset
  **/
  @Schema(description = "")
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }

  public ListBackupsRequest startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @Schema(description = "")
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListBackupsRequest listBackupsRequest = (ListBackupsRequest) o;
    return Objects.equals(this.backupDataType, listBackupsRequest.backupDataType) &&
        Objects.equals(this.backupStatus, listBackupsRequest.backupStatus) &&
        Objects.equals(this.endTime, listBackupsRequest.endTime) &&
        Objects.equals(this.instanceId, listBackupsRequest.instanceId) &&
        Objects.equals(this.limit, listBackupsRequest.limit) &&
        Objects.equals(this.offset, listBackupsRequest.offset) &&
        Objects.equals(this.startTime, listBackupsRequest.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupDataType, backupStatus, endTime, instanceId, limit, offset, startTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListBackupsRequest {\n");
    
    sb.append("    backupDataType: ").append(toIndentedString(backupDataType)).append("\n");
    sb.append("    backupStatus: ").append(toIndentedString(backupStatus)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
