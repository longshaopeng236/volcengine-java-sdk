/*
 * directconnect
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.directconnect.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * AssociateConnectionToDirectConnectGatewayRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-24T18:20:58.026076+08:00[Asia/Shanghai]")
public class AssociateConnectionToDirectConnectGatewayRequest {
  @SerializedName("DirectConnectConnectionId")
  private String directConnectConnectionId = null;

  @SerializedName("DirectConnectGatewayId")
  private String directConnectGatewayId = null;

  @SerializedName("LocalIP")
  private String localIP = null;

  @SerializedName("Mask")
  private String mask = null;

  @SerializedName("PeerIp")
  private String peerIp = null;

  @SerializedName("VlanId")
  private Integer vlanId = null;

  public AssociateConnectionToDirectConnectGatewayRequest directConnectConnectionId(String directConnectConnectionId) {
    this.directConnectConnectionId = directConnectConnectionId;
    return this;
  }

   /**
   * Get directConnectConnectionId
   * @return directConnectConnectionId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getDirectConnectConnectionId() {
    return directConnectConnectionId;
  }

  public void setDirectConnectConnectionId(String directConnectConnectionId) {
    this.directConnectConnectionId = directConnectConnectionId;
  }

  public AssociateConnectionToDirectConnectGatewayRequest directConnectGatewayId(String directConnectGatewayId) {
    this.directConnectGatewayId = directConnectGatewayId;
    return this;
  }

   /**
   * Get directConnectGatewayId
   * @return directConnectGatewayId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getDirectConnectGatewayId() {
    return directConnectGatewayId;
  }

  public void setDirectConnectGatewayId(String directConnectGatewayId) {
    this.directConnectGatewayId = directConnectGatewayId;
  }

  public AssociateConnectionToDirectConnectGatewayRequest localIP(String localIP) {
    this.localIP = localIP;
    return this;
  }

   /**
   * Get localIP
   * @return localIP
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getLocalIP() {
    return localIP;
  }

  public void setLocalIP(String localIP) {
    this.localIP = localIP;
  }

  public AssociateConnectionToDirectConnectGatewayRequest mask(String mask) {
    this.mask = mask;
    return this;
  }

   /**
   * Get mask
   * @return mask
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getMask() {
    return mask;
  }

  public void setMask(String mask) {
    this.mask = mask;
  }

  public AssociateConnectionToDirectConnectGatewayRequest peerIp(String peerIp) {
    this.peerIp = peerIp;
    return this;
  }

   /**
   * Get peerIp
   * @return peerIp
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getPeerIp() {
    return peerIp;
  }

  public void setPeerIp(String peerIp) {
    this.peerIp = peerIp;
  }

  public AssociateConnectionToDirectConnectGatewayRequest vlanId(Integer vlanId) {
    this.vlanId = vlanId;
    return this;
  }

   /**
   * Get vlanId
   * @return vlanId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public Integer getVlanId() {
    return vlanId;
  }

  public void setVlanId(Integer vlanId) {
    this.vlanId = vlanId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociateConnectionToDirectConnectGatewayRequest associateConnectionToDirectConnectGatewayRequest = (AssociateConnectionToDirectConnectGatewayRequest) o;
    return Objects.equals(this.directConnectConnectionId, associateConnectionToDirectConnectGatewayRequest.directConnectConnectionId) &&
        Objects.equals(this.directConnectGatewayId, associateConnectionToDirectConnectGatewayRequest.directConnectGatewayId) &&
        Objects.equals(this.localIP, associateConnectionToDirectConnectGatewayRequest.localIP) &&
        Objects.equals(this.mask, associateConnectionToDirectConnectGatewayRequest.mask) &&
        Objects.equals(this.peerIp, associateConnectionToDirectConnectGatewayRequest.peerIp) &&
        Objects.equals(this.vlanId, associateConnectionToDirectConnectGatewayRequest.vlanId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directConnectConnectionId, directConnectGatewayId, localIP, mask, peerIp, vlanId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociateConnectionToDirectConnectGatewayRequest {\n");
    
    sb.append("    directConnectConnectionId: ").append(toIndentedString(directConnectConnectionId)).append("\n");
    sb.append("    directConnectGatewayId: ").append(toIndentedString(directConnectGatewayId)).append("\n");
    sb.append("    localIP: ").append(toIndentedString(localIP)).append("\n");
    sb.append("    mask: ").append(toIndentedString(mask)).append("\n");
    sb.append("    peerIp: ").append(toIndentedString(peerIp)).append("\n");
    sb.append("    vlanId: ").append(toIndentedString(vlanId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
