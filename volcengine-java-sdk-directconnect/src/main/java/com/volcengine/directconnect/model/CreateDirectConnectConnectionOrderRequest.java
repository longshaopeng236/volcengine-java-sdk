/*
 * directconnect
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.directconnect.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CreateDirectConnectConnectionOrderRequest
 */


public class CreateDirectConnectConnectionOrderRequest {
  @SerializedName("ClientToken")
  private String clientToken = null;

  @SerializedName("DirectConnectConnectionId")
  private String directConnectConnectionId = null;

  @SerializedName("Period")
  private Integer period = null;

  /**
   * Gets or Sets periodUnit
   */
  @JsonAdapter(PeriodUnitEnum.Adapter.class)
  public enum PeriodUnitEnum {
    MONTH("Month"),
    YEAR("Year");

    private String value;

    PeriodUnitEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PeriodUnitEnum fromValue(String input) {
      for (PeriodUnitEnum b : PeriodUnitEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PeriodUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeriodUnitEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public PeriodUnitEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return PeriodUnitEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("PeriodUnit")
  private PeriodUnitEnum periodUnit = null;

  @SerializedName("RemainRenewTimes")
  private Integer remainRenewTimes = null;

  @SerializedName("RenewPeriod")
  private Integer renewPeriod = null;

  /**
   * Gets or Sets renewType
   */
  @JsonAdapter(RenewTypeEnum.Adapter.class)
  public enum RenewTypeEnum {
    MANUAL("Manual"),
    AUTO("Auto"),
    NORENEW("NoRenew");

    private String value;

    RenewTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RenewTypeEnum fromValue(String input) {
      for (RenewTypeEnum b : RenewTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RenewTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RenewTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RenewTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RenewTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("RenewType")
  private RenewTypeEnum renewType = null;

  public CreateDirectConnectConnectionOrderRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

   /**
   * Get clientToken
   * @return clientToken
  **/
  @Schema(description = "")
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }

  public CreateDirectConnectConnectionOrderRequest directConnectConnectionId(String directConnectConnectionId) {
    this.directConnectConnectionId = directConnectConnectionId;
    return this;
  }

   /**
   * Get directConnectConnectionId
   * @return directConnectConnectionId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getDirectConnectConnectionId() {
    return directConnectConnectionId;
  }

  public void setDirectConnectConnectionId(String directConnectConnectionId) {
    this.directConnectConnectionId = directConnectConnectionId;
  }

  public CreateDirectConnectConnectionOrderRequest period(Integer period) {
    this.period = period;
    return this;
  }

   /**
   * Get period
   * @return period
  **/
  @Schema(description = "")
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }

  public CreateDirectConnectConnectionOrderRequest periodUnit(PeriodUnitEnum periodUnit) {
    this.periodUnit = periodUnit;
    return this;
  }

   /**
   * Get periodUnit
   * @return periodUnit
  **/
  @Schema(description = "")
  public PeriodUnitEnum getPeriodUnit() {
    return periodUnit;
  }

  public void setPeriodUnit(PeriodUnitEnum periodUnit) {
    this.periodUnit = periodUnit;
  }

  public CreateDirectConnectConnectionOrderRequest remainRenewTimes(Integer remainRenewTimes) {
    this.remainRenewTimes = remainRenewTimes;
    return this;
  }

   /**
   * Get remainRenewTimes
   * @return remainRenewTimes
  **/
  @Schema(description = "")
  public Integer getRemainRenewTimes() {
    return remainRenewTimes;
  }

  public void setRemainRenewTimes(Integer remainRenewTimes) {
    this.remainRenewTimes = remainRenewTimes;
  }

  public CreateDirectConnectConnectionOrderRequest renewPeriod(Integer renewPeriod) {
    this.renewPeriod = renewPeriod;
    return this;
  }

   /**
   * Get renewPeriod
   * @return renewPeriod
  **/
  @Schema(description = "")
  public Integer getRenewPeriod() {
    return renewPeriod;
  }

  public void setRenewPeriod(Integer renewPeriod) {
    this.renewPeriod = renewPeriod;
  }

  public CreateDirectConnectConnectionOrderRequest renewType(RenewTypeEnum renewType) {
    this.renewType = renewType;
    return this;
  }

   /**
   * Get renewType
   * @return renewType
  **/
  @Schema(description = "")
  public RenewTypeEnum getRenewType() {
    return renewType;
  }

  public void setRenewType(RenewTypeEnum renewType) {
    this.renewType = renewType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDirectConnectConnectionOrderRequest createDirectConnectConnectionOrderRequest = (CreateDirectConnectConnectionOrderRequest) o;
    return Objects.equals(this.clientToken, createDirectConnectConnectionOrderRequest.clientToken) &&
        Objects.equals(this.directConnectConnectionId, createDirectConnectConnectionOrderRequest.directConnectConnectionId) &&
        Objects.equals(this.period, createDirectConnectConnectionOrderRequest.period) &&
        Objects.equals(this.periodUnit, createDirectConnectConnectionOrderRequest.periodUnit) &&
        Objects.equals(this.remainRenewTimes, createDirectConnectConnectionOrderRequest.remainRenewTimes) &&
        Objects.equals(this.renewPeriod, createDirectConnectConnectionOrderRequest.renewPeriod) &&
        Objects.equals(this.renewType, createDirectConnectConnectionOrderRequest.renewType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, directConnectConnectionId, period, periodUnit, remainRenewTimes, renewPeriod, renewType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDirectConnectConnectionOrderRequest {\n");
    
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    directConnectConnectionId: ").append(toIndentedString(directConnectConnectionId)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    periodUnit: ").append(toIndentedString(periodUnit)).append("\n");
    sb.append("    remainRenewTimes: ").append(toIndentedString(remainRenewTimes)).append("\n");
    sb.append("    renewPeriod: ").append(toIndentedString(renewPeriod)).append("\n");
    sb.append("    renewType: ").append(toIndentedString(renewType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
