/*
 * mongodb
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.mongodb.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * InstanceParameterForDescribeDBInstanceParametersOutput
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-19T10:07:26.552898+08:00[Asia/Shanghai]")
public class InstanceParameterForDescribeDBInstanceParametersOutput {
  @SerializedName("CheckingCode")
  private String checkingCode = null;

  @SerializedName("ForceModify")
  private Boolean forceModify = null;

  @SerializedName("ForceRestart")
  private Boolean forceRestart = null;

  @SerializedName("ParameterDefaultValue")
  private String parameterDefaultValue = null;

  @SerializedName("ParameterDescription")
  private String parameterDescription = null;

  /**
   * Gets or Sets parameterRole
   */
  @JsonAdapter(ParameterRoleEnum.Adapter.class)
  public enum ParameterRoleEnum {
    CONFIGSERVER("ConfigServer"),
    MONGOS("Mongos"),
    NODE("Node"),
    SHARD("Shard"),
    UNKNOWN("Unknown");

    private String value;

    ParameterRoleEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ParameterRoleEnum fromValue(String input) {
      for (ParameterRoleEnum b : ParameterRoleEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ParameterRoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ParameterRoleEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ParameterRoleEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ParameterRoleEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ParameterRole")
  private ParameterRoleEnum parameterRole = null;

  /**
   * Gets or Sets parameterType
   */
  @JsonAdapter(ParameterTypeEnum.Adapter.class)
  public enum ParameterTypeEnum {
    BOOLEAN("Boolean"),
    FLOAT("Float"),
    INTEGER("Integer"),
    LIST("List"),
    STRING("String"),
    UNKNOWN("Unknown");

    private String value;

    ParameterTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ParameterTypeEnum fromValue(String input) {
      for (ParameterTypeEnum b : ParameterTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ParameterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ParameterTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ParameterTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ParameterTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ParameterType")
  private ParameterTypeEnum parameterType = null;

  @SerializedName("ParameterValue")
  private String parameterValue = null;

  public InstanceParameterForDescribeDBInstanceParametersOutput checkingCode(String checkingCode) {
    this.checkingCode = checkingCode;
    return this;
  }

   /**
   * Get checkingCode
   * @return checkingCode
  **/
  @Schema(description = "")
  public String getCheckingCode() {
    return checkingCode;
  }

  public void setCheckingCode(String checkingCode) {
    this.checkingCode = checkingCode;
  }

  public InstanceParameterForDescribeDBInstanceParametersOutput forceModify(Boolean forceModify) {
    this.forceModify = forceModify;
    return this;
  }

   /**
   * Get forceModify
   * @return forceModify
  **/
  @Schema(description = "")
  public Boolean isForceModify() {
    return forceModify;
  }

  public void setForceModify(Boolean forceModify) {
    this.forceModify = forceModify;
  }

  public InstanceParameterForDescribeDBInstanceParametersOutput forceRestart(Boolean forceRestart) {
    this.forceRestart = forceRestart;
    return this;
  }

   /**
   * Get forceRestart
   * @return forceRestart
  **/
  @Schema(description = "")
  public Boolean isForceRestart() {
    return forceRestart;
  }

  public void setForceRestart(Boolean forceRestart) {
    this.forceRestart = forceRestart;
  }

  public InstanceParameterForDescribeDBInstanceParametersOutput parameterDefaultValue(String parameterDefaultValue) {
    this.parameterDefaultValue = parameterDefaultValue;
    return this;
  }

   /**
   * Get parameterDefaultValue
   * @return parameterDefaultValue
  **/
  @Schema(description = "")
  public String getParameterDefaultValue() {
    return parameterDefaultValue;
  }

  public void setParameterDefaultValue(String parameterDefaultValue) {
    this.parameterDefaultValue = parameterDefaultValue;
  }

  public InstanceParameterForDescribeDBInstanceParametersOutput parameterDescription(String parameterDescription) {
    this.parameterDescription = parameterDescription;
    return this;
  }

   /**
   * Get parameterDescription
   * @return parameterDescription
  **/
  @Schema(description = "")
  public String getParameterDescription() {
    return parameterDescription;
  }

  public void setParameterDescription(String parameterDescription) {
    this.parameterDescription = parameterDescription;
  }

  public InstanceParameterForDescribeDBInstanceParametersOutput parameterRole(ParameterRoleEnum parameterRole) {
    this.parameterRole = parameterRole;
    return this;
  }

   /**
   * Get parameterRole
   * @return parameterRole
  **/
  @Schema(description = "")
  public ParameterRoleEnum getParameterRole() {
    return parameterRole;
  }

  public void setParameterRole(ParameterRoleEnum parameterRole) {
    this.parameterRole = parameterRole;
  }

  public InstanceParameterForDescribeDBInstanceParametersOutput parameterType(ParameterTypeEnum parameterType) {
    this.parameterType = parameterType;
    return this;
  }

   /**
   * Get parameterType
   * @return parameterType
  **/
  @Schema(description = "")
  public ParameterTypeEnum getParameterType() {
    return parameterType;
  }

  public void setParameterType(ParameterTypeEnum parameterType) {
    this.parameterType = parameterType;
  }

  public InstanceParameterForDescribeDBInstanceParametersOutput parameterValue(String parameterValue) {
    this.parameterValue = parameterValue;
    return this;
  }

   /**
   * Get parameterValue
   * @return parameterValue
  **/
  @Schema(description = "")
  public String getParameterValue() {
    return parameterValue;
  }

  public void setParameterValue(String parameterValue) {
    this.parameterValue = parameterValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceParameterForDescribeDBInstanceParametersOutput instanceParameterForDescribeDBInstanceParametersOutput = (InstanceParameterForDescribeDBInstanceParametersOutput) o;
    return Objects.equals(this.checkingCode, instanceParameterForDescribeDBInstanceParametersOutput.checkingCode) &&
        Objects.equals(this.forceModify, instanceParameterForDescribeDBInstanceParametersOutput.forceModify) &&
        Objects.equals(this.forceRestart, instanceParameterForDescribeDBInstanceParametersOutput.forceRestart) &&
        Objects.equals(this.parameterDefaultValue, instanceParameterForDescribeDBInstanceParametersOutput.parameterDefaultValue) &&
        Objects.equals(this.parameterDescription, instanceParameterForDescribeDBInstanceParametersOutput.parameterDescription) &&
        Objects.equals(this.parameterRole, instanceParameterForDescribeDBInstanceParametersOutput.parameterRole) &&
        Objects.equals(this.parameterType, instanceParameterForDescribeDBInstanceParametersOutput.parameterType) &&
        Objects.equals(this.parameterValue, instanceParameterForDescribeDBInstanceParametersOutput.parameterValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkingCode, forceModify, forceRestart, parameterDefaultValue, parameterDescription, parameterRole, parameterType, parameterValue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceParameterForDescribeDBInstanceParametersOutput {\n");
    
    sb.append("    checkingCode: ").append(toIndentedString(checkingCode)).append("\n");
    sb.append("    forceModify: ").append(toIndentedString(forceModify)).append("\n");
    sb.append("    forceRestart: ").append(toIndentedString(forceRestart)).append("\n");
    sb.append("    parameterDefaultValue: ").append(toIndentedString(parameterDefaultValue)).append("\n");
    sb.append("    parameterDescription: ").append(toIndentedString(parameterDescription)).append("\n");
    sb.append("    parameterRole: ").append(toIndentedString(parameterRole)).append("\n");
    sb.append("    parameterType: ").append(toIndentedString(parameterType)).append("\n");
    sb.append("    parameterValue: ").append(toIndentedString(parameterValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
