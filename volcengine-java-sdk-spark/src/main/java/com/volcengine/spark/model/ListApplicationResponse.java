/*
 * spark
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.spark.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.spark.model.RecordForlistApplicationOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ListApplicationResponse
 */


public class ListApplicationResponse {
  @SerializedName("Current")
  private String current = null;

  @SerializedName("PageSize")
  private String pageSize = null;

  @SerializedName("Records")
  private List<RecordForlistApplicationOutput> records = null;

  @SerializedName("Total")
  private String total = null;

  public ListApplicationResponse current(String current) {
    this.current = current;
    return this;
  }

   /**
   * Get current
   * @return current
  **/
  @Schema(description = "")
  public String getCurrent() {
    return current;
  }

  public void setCurrent(String current) {
    this.current = current;
  }

  public ListApplicationResponse pageSize(String pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @Schema(description = "")
  public String getPageSize() {
    return pageSize;
  }

  public void setPageSize(String pageSize) {
    this.pageSize = pageSize;
  }

  public ListApplicationResponse records(List<RecordForlistApplicationOutput> records) {
    this.records = records;
    return this;
  }

  public ListApplicationResponse addRecordsItem(RecordForlistApplicationOutput recordsItem) {
    if (this.records == null) {
      this.records = new ArrayList<RecordForlistApplicationOutput>();
    }
    this.records.add(recordsItem);
    return this;
  }

   /**
   * Get records
   * @return records
  **/
  @Valid
  @Schema(description = "")
  public List<RecordForlistApplicationOutput> getRecords() {
    return records;
  }

  public void setRecords(List<RecordForlistApplicationOutput> records) {
    this.records = records;
  }

  public ListApplicationResponse total(String total) {
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @Schema(description = "")
  public String getTotal() {
    return total;
  }

  public void setTotal(String total) {
    this.total = total;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListApplicationResponse listApplicationResponse = (ListApplicationResponse) o;
    return Objects.equals(this.current, listApplicationResponse.current) &&
        Objects.equals(this.pageSize, listApplicationResponse.pageSize) &&
        Objects.equals(this.records, listApplicationResponse.records) &&
        Objects.equals(this.total, listApplicationResponse.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(current, pageSize, records, total);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListApplicationResponse {\n");
    
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
