/*
 * spark
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.spark.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.spark.model.ItemForlistProjectOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ListProjectResponse
 */


public class ListProjectResponse {
  @SerializedName("Items")
  private List<ItemForlistProjectOutput> items = null;

  @SerializedName("PageNum")
  private Integer pageNum = null;

  @SerializedName("PageSize")
  private Integer pageSize = null;

  @SerializedName("Pages")
  private Integer pages = null;

  @SerializedName("Total")
  private Long total = null;

  public ListProjectResponse items(List<ItemForlistProjectOutput> items) {
    this.items = items;
    return this;
  }

  public ListProjectResponse addItemsItem(ItemForlistProjectOutput itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<ItemForlistProjectOutput>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @Valid
  @Schema(description = "")
  public List<ItemForlistProjectOutput> getItems() {
    return items;
  }

  public void setItems(List<ItemForlistProjectOutput> items) {
    this.items = items;
  }

  public ListProjectResponse pageNum(Integer pageNum) {
    this.pageNum = pageNum;
    return this;
  }

   /**
   * Get pageNum
   * @return pageNum
  **/
  @Schema(description = "")
  public Integer getPageNum() {
    return pageNum;
  }

  public void setPageNum(Integer pageNum) {
    this.pageNum = pageNum;
  }

  public ListProjectResponse pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @Schema(description = "")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public ListProjectResponse pages(Integer pages) {
    this.pages = pages;
    return this;
  }

   /**
   * Get pages
   * @return pages
  **/
  @Schema(description = "")
  public Integer getPages() {
    return pages;
  }

  public void setPages(Integer pages) {
    this.pages = pages;
  }

  public ListProjectResponse total(Long total) {
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @Schema(description = "")
  public Long getTotal() {
    return total;
  }

  public void setTotal(Long total) {
    this.total = total;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListProjectResponse listProjectResponse = (ListProjectResponse) o;
    return Objects.equals(this.items, listProjectResponse.items) &&
        Objects.equals(this.pageNum, listProjectResponse.pageNum) &&
        Objects.equals(this.pageSize, listProjectResponse.pageSize) &&
        Objects.equals(this.pages, listProjectResponse.pages) &&
        Objects.equals(this.total, listProjectResponse.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(items, pageNum, pageSize, pages, total);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListProjectResponse {\n");
    
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    pageNum: ").append(toIndentedString(pageNum)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
