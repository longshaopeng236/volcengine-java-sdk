/*
 * spark
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.spark.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.spark.model.DependencyForcreateApplicationInput;
import com.volcengine.spark.model.DeployRequestForcreateApplicationInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CreateApplicationRequest
 */


public class CreateApplicationRequest {
  @SerializedName("AccountId")
  private String accountId = null;

  @SerializedName("ApplicationName")
  private String applicationName = null;

  @SerializedName("ApplicationType")
  private String applicationType = null;

  @SerializedName("Args")
  private String args = null;

  @SerializedName("Conf")
  private Map<String, String> conf = null;

  @SerializedName("Dependency")
  private DependencyForcreateApplicationInput dependency = null;

  @SerializedName("DeployRequest")
  private DeployRequestForcreateApplicationInput deployRequest = null;

  @SerializedName("EngineVersion")
  private String engineVersion = null;

  @SerializedName("Id")
  private Long id = null;

  @SerializedName("Image")
  private String image = null;

  @SerializedName("Jar")
  private String jar = null;

  @SerializedName("MainClass")
  private String mainClass = null;

  @SerializedName("ProjectId")
  private String projectId = null;

  @SerializedName("SqlText")
  private String sqlText = null;

  @SerializedName("UniqueKey")
  private String uniqueKey = null;

  @SerializedName("UserId")
  private String userId = null;

  public CreateApplicationRequest accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @Schema(description = "")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public CreateApplicationRequest applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

   /**
   * Get applicationName
   * @return applicationName
  **/
  @Schema(description = "")
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }

  public CreateApplicationRequest applicationType(String applicationType) {
    this.applicationType = applicationType;
    return this;
  }

   /**
   * Get applicationType
   * @return applicationType
  **/
  @Schema(description = "")
  public String getApplicationType() {
    return applicationType;
  }

  public void setApplicationType(String applicationType) {
    this.applicationType = applicationType;
  }

  public CreateApplicationRequest args(String args) {
    this.args = args;
    return this;
  }

   /**
   * Get args
   * @return args
  **/
  @Schema(description = "")
  public String getArgs() {
    return args;
  }

  public void setArgs(String args) {
    this.args = args;
  }

  public CreateApplicationRequest conf(Map<String, String> conf) {
    this.conf = conf;
    return this;
  }

  public CreateApplicationRequest putConfItem(String key, String confItem) {
    if (this.conf == null) {
      this.conf = new HashMap<String, String>();
    }
    this.conf.put(key, confItem);
    return this;
  }

   /**
   * Get conf
   * @return conf
  **/
  @Schema(description = "")
  public Map<String, String> getConf() {
    return conf;
  }

  public void setConf(Map<String, String> conf) {
    this.conf = conf;
  }

  public CreateApplicationRequest dependency(DependencyForcreateApplicationInput dependency) {
    this.dependency = dependency;
    return this;
  }

   /**
   * Get dependency
   * @return dependency
  **/
  @Valid
  @Schema(description = "")
  public DependencyForcreateApplicationInput getDependency() {
    return dependency;
  }

  public void setDependency(DependencyForcreateApplicationInput dependency) {
    this.dependency = dependency;
  }

  public CreateApplicationRequest deployRequest(DeployRequestForcreateApplicationInput deployRequest) {
    this.deployRequest = deployRequest;
    return this;
  }

   /**
   * Get deployRequest
   * @return deployRequest
  **/
  @Valid
  @Schema(description = "")
  public DeployRequestForcreateApplicationInput getDeployRequest() {
    return deployRequest;
  }

  public void setDeployRequest(DeployRequestForcreateApplicationInput deployRequest) {
    this.deployRequest = deployRequest;
  }

  public CreateApplicationRequest engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

   /**
   * Get engineVersion
   * @return engineVersion
  **/
  @Schema(description = "")
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }

  public CreateApplicationRequest id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public CreateApplicationRequest image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @Schema(description = "")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public CreateApplicationRequest jar(String jar) {
    this.jar = jar;
    return this;
  }

   /**
   * Get jar
   * @return jar
  **/
  @Schema(description = "")
  public String getJar() {
    return jar;
  }

  public void setJar(String jar) {
    this.jar = jar;
  }

  public CreateApplicationRequest mainClass(String mainClass) {
    this.mainClass = mainClass;
    return this;
  }

   /**
   * Get mainClass
   * @return mainClass
  **/
  @Schema(description = "")
  public String getMainClass() {
    return mainClass;
  }

  public void setMainClass(String mainClass) {
    this.mainClass = mainClass;
  }

  public CreateApplicationRequest projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @Schema(description = "")
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }

  public CreateApplicationRequest sqlText(String sqlText) {
    this.sqlText = sqlText;
    return this;
  }

   /**
   * Get sqlText
   * @return sqlText
  **/
  @Schema(description = "")
  public String getSqlText() {
    return sqlText;
  }

  public void setSqlText(String sqlText) {
    this.sqlText = sqlText;
  }

  public CreateApplicationRequest uniqueKey(String uniqueKey) {
    this.uniqueKey = uniqueKey;
    return this;
  }

   /**
   * Get uniqueKey
   * @return uniqueKey
  **/
  @Schema(description = "")
  public String getUniqueKey() {
    return uniqueKey;
  }

  public void setUniqueKey(String uniqueKey) {
    this.uniqueKey = uniqueKey;
  }

  public CreateApplicationRequest userId(String userId) {
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @Schema(description = "")
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateApplicationRequest createApplicationRequest = (CreateApplicationRequest) o;
    return Objects.equals(this.accountId, createApplicationRequest.accountId) &&
        Objects.equals(this.applicationName, createApplicationRequest.applicationName) &&
        Objects.equals(this.applicationType, createApplicationRequest.applicationType) &&
        Objects.equals(this.args, createApplicationRequest.args) &&
        Objects.equals(this.conf, createApplicationRequest.conf) &&
        Objects.equals(this.dependency, createApplicationRequest.dependency) &&
        Objects.equals(this.deployRequest, createApplicationRequest.deployRequest) &&
        Objects.equals(this.engineVersion, createApplicationRequest.engineVersion) &&
        Objects.equals(this.id, createApplicationRequest.id) &&
        Objects.equals(this.image, createApplicationRequest.image) &&
        Objects.equals(this.jar, createApplicationRequest.jar) &&
        Objects.equals(this.mainClass, createApplicationRequest.mainClass) &&
        Objects.equals(this.projectId, createApplicationRequest.projectId) &&
        Objects.equals(this.sqlText, createApplicationRequest.sqlText) &&
        Objects.equals(this.uniqueKey, createApplicationRequest.uniqueKey) &&
        Objects.equals(this.userId, createApplicationRequest.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, applicationName, applicationType, args, conf, dependency, deployRequest, engineVersion, id, image, jar, mainClass, projectId, sqlText, uniqueKey, userId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateApplicationRequest {\n");
    
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    applicationType: ").append(toIndentedString(applicationType)).append("\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    conf: ").append(toIndentedString(conf)).append("\n");
    sb.append("    dependency: ").append(toIndentedString(dependency)).append("\n");
    sb.append("    deployRequest: ").append(toIndentedString(deployRequest)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    jar: ").append(toIndentedString(jar)).append("\n");
    sb.append("    mainClass: ").append(toIndentedString(mainClass)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    sqlText: ").append(toIndentedString(sqlText)).append("\n");
    sb.append("    uniqueKey: ").append(toIndentedString(uniqueKey)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
