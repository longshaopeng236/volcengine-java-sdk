/*
 * spark
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.spark.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.spark.model.DependencyForlistApplicationOutput;
import com.volcengine.spark.model.DeployRequestForlistApplicationOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * RecordForlistApplicationOutput
 */


public class RecordForlistApplicationOutput {
  @SerializedName("Alert")
  private Boolean alert = null;

  @SerializedName("ApplicationName")
  private String applicationName = null;

  @SerializedName("ApplicationTrn")
  private String applicationTrn = null;

  @SerializedName("ApplicationType")
  private String applicationType = null;

  @SerializedName("Args")
  private String args = null;

  @SerializedName("Conf")
  private Map<String, String> conf = null;

  @SerializedName("Dependency")
  private DependencyForlistApplicationOutput dependency = null;

  @SerializedName("DeployRequest")
  private DeployRequestForlistApplicationOutput deployRequest = null;

  @SerializedName("EngineVersion")
  private String engineVersion = null;

  @SerializedName("Image")
  private String image = null;

  @SerializedName("IsLatestVersion")
  private Boolean isLatestVersion = null;

  @SerializedName("Jar")
  private String jar = null;

  @SerializedName("LatestVersion")
  private String latestVersion = null;

  @SerializedName("MainClass")
  private String mainClass = null;

  @SerializedName("ProjectId")
  private String projectId = null;

  @SerializedName("RestUrl")
  private String restUrl = null;

  @SerializedName("SqlText")
  private String sqlText = null;

  @SerializedName("State")
  private String state = null;

  @SerializedName("UserId")
  private String userId = null;

  @SerializedName("VersionName")
  private String versionName = null;

  public RecordForlistApplicationOutput alert(Boolean alert) {
    this.alert = alert;
    return this;
  }

   /**
   * Get alert
   * @return alert
  **/
  @Schema(description = "")
  public Boolean isAlert() {
    return alert;
  }

  public void setAlert(Boolean alert) {
    this.alert = alert;
  }

  public RecordForlistApplicationOutput applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

   /**
   * Get applicationName
   * @return applicationName
  **/
  @Schema(description = "")
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }

  public RecordForlistApplicationOutput applicationTrn(String applicationTrn) {
    this.applicationTrn = applicationTrn;
    return this;
  }

   /**
   * Get applicationTrn
   * @return applicationTrn
  **/
  @Schema(description = "")
  public String getApplicationTrn() {
    return applicationTrn;
  }

  public void setApplicationTrn(String applicationTrn) {
    this.applicationTrn = applicationTrn;
  }

  public RecordForlistApplicationOutput applicationType(String applicationType) {
    this.applicationType = applicationType;
    return this;
  }

   /**
   * Get applicationType
   * @return applicationType
  **/
  @Schema(description = "")
  public String getApplicationType() {
    return applicationType;
  }

  public void setApplicationType(String applicationType) {
    this.applicationType = applicationType;
  }

  public RecordForlistApplicationOutput args(String args) {
    this.args = args;
    return this;
  }

   /**
   * Get args
   * @return args
  **/
  @Schema(description = "")
  public String getArgs() {
    return args;
  }

  public void setArgs(String args) {
    this.args = args;
  }

  public RecordForlistApplicationOutput conf(Map<String, String> conf) {
    this.conf = conf;
    return this;
  }

  public RecordForlistApplicationOutput putConfItem(String key, String confItem) {
    if (this.conf == null) {
      this.conf = new HashMap<String, String>();
    }
    this.conf.put(key, confItem);
    return this;
  }

   /**
   * Get conf
   * @return conf
  **/
  @Schema(description = "")
  public Map<String, String> getConf() {
    return conf;
  }

  public void setConf(Map<String, String> conf) {
    this.conf = conf;
  }

  public RecordForlistApplicationOutput dependency(DependencyForlistApplicationOutput dependency) {
    this.dependency = dependency;
    return this;
  }

   /**
   * Get dependency
   * @return dependency
  **/
  @Valid
  @Schema(description = "")
  public DependencyForlistApplicationOutput getDependency() {
    return dependency;
  }

  public void setDependency(DependencyForlistApplicationOutput dependency) {
    this.dependency = dependency;
  }

  public RecordForlistApplicationOutput deployRequest(DeployRequestForlistApplicationOutput deployRequest) {
    this.deployRequest = deployRequest;
    return this;
  }

   /**
   * Get deployRequest
   * @return deployRequest
  **/
  @Valid
  @Schema(description = "")
  public DeployRequestForlistApplicationOutput getDeployRequest() {
    return deployRequest;
  }

  public void setDeployRequest(DeployRequestForlistApplicationOutput deployRequest) {
    this.deployRequest = deployRequest;
  }

  public RecordForlistApplicationOutput engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

   /**
   * Get engineVersion
   * @return engineVersion
  **/
  @Schema(description = "")
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }

  public RecordForlistApplicationOutput image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @Schema(description = "")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public RecordForlistApplicationOutput isLatestVersion(Boolean isLatestVersion) {
    this.isLatestVersion = isLatestVersion;
    return this;
  }

   /**
   * Get isLatestVersion
   * @return isLatestVersion
  **/
  @Schema(description = "")
  public Boolean isIsLatestVersion() {
    return isLatestVersion;
  }

  public void setIsLatestVersion(Boolean isLatestVersion) {
    this.isLatestVersion = isLatestVersion;
  }

  public RecordForlistApplicationOutput jar(String jar) {
    this.jar = jar;
    return this;
  }

   /**
   * Get jar
   * @return jar
  **/
  @Schema(description = "")
  public String getJar() {
    return jar;
  }

  public void setJar(String jar) {
    this.jar = jar;
  }

  public RecordForlistApplicationOutput latestVersion(String latestVersion) {
    this.latestVersion = latestVersion;
    return this;
  }

   /**
   * Get latestVersion
   * @return latestVersion
  **/
  @Schema(description = "")
  public String getLatestVersion() {
    return latestVersion;
  }

  public void setLatestVersion(String latestVersion) {
    this.latestVersion = latestVersion;
  }

  public RecordForlistApplicationOutput mainClass(String mainClass) {
    this.mainClass = mainClass;
    return this;
  }

   /**
   * Get mainClass
   * @return mainClass
  **/
  @Schema(description = "")
  public String getMainClass() {
    return mainClass;
  }

  public void setMainClass(String mainClass) {
    this.mainClass = mainClass;
  }

  public RecordForlistApplicationOutput projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @Schema(description = "")
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }

  public RecordForlistApplicationOutput restUrl(String restUrl) {
    this.restUrl = restUrl;
    return this;
  }

   /**
   * Get restUrl
   * @return restUrl
  **/
  @Schema(description = "")
  public String getRestUrl() {
    return restUrl;
  }

  public void setRestUrl(String restUrl) {
    this.restUrl = restUrl;
  }

  public RecordForlistApplicationOutput sqlText(String sqlText) {
    this.sqlText = sqlText;
    return this;
  }

   /**
   * Get sqlText
   * @return sqlText
  **/
  @Schema(description = "")
  public String getSqlText() {
    return sqlText;
  }

  public void setSqlText(String sqlText) {
    this.sqlText = sqlText;
  }

  public RecordForlistApplicationOutput state(String state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @Schema(description = "")
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }

  public RecordForlistApplicationOutput userId(String userId) {
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @Schema(description = "")
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }

  public RecordForlistApplicationOutput versionName(String versionName) {
    this.versionName = versionName;
    return this;
  }

   /**
   * Get versionName
   * @return versionName
  **/
  @Schema(description = "")
  public String getVersionName() {
    return versionName;
  }

  public void setVersionName(String versionName) {
    this.versionName = versionName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordForlistApplicationOutput recordForlistApplicationOutput = (RecordForlistApplicationOutput) o;
    return Objects.equals(this.alert, recordForlistApplicationOutput.alert) &&
        Objects.equals(this.applicationName, recordForlistApplicationOutput.applicationName) &&
        Objects.equals(this.applicationTrn, recordForlistApplicationOutput.applicationTrn) &&
        Objects.equals(this.applicationType, recordForlistApplicationOutput.applicationType) &&
        Objects.equals(this.args, recordForlistApplicationOutput.args) &&
        Objects.equals(this.conf, recordForlistApplicationOutput.conf) &&
        Objects.equals(this.dependency, recordForlistApplicationOutput.dependency) &&
        Objects.equals(this.deployRequest, recordForlistApplicationOutput.deployRequest) &&
        Objects.equals(this.engineVersion, recordForlistApplicationOutput.engineVersion) &&
        Objects.equals(this.image, recordForlistApplicationOutput.image) &&
        Objects.equals(this.isLatestVersion, recordForlistApplicationOutput.isLatestVersion) &&
        Objects.equals(this.jar, recordForlistApplicationOutput.jar) &&
        Objects.equals(this.latestVersion, recordForlistApplicationOutput.latestVersion) &&
        Objects.equals(this.mainClass, recordForlistApplicationOutput.mainClass) &&
        Objects.equals(this.projectId, recordForlistApplicationOutput.projectId) &&
        Objects.equals(this.restUrl, recordForlistApplicationOutput.restUrl) &&
        Objects.equals(this.sqlText, recordForlistApplicationOutput.sqlText) &&
        Objects.equals(this.state, recordForlistApplicationOutput.state) &&
        Objects.equals(this.userId, recordForlistApplicationOutput.userId) &&
        Objects.equals(this.versionName, recordForlistApplicationOutput.versionName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alert, applicationName, applicationTrn, applicationType, args, conf, dependency, deployRequest, engineVersion, image, isLatestVersion, jar, latestVersion, mainClass, projectId, restUrl, sqlText, state, userId, versionName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordForlistApplicationOutput {\n");
    
    sb.append("    alert: ").append(toIndentedString(alert)).append("\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    applicationTrn: ").append(toIndentedString(applicationTrn)).append("\n");
    sb.append("    applicationType: ").append(toIndentedString(applicationType)).append("\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    conf: ").append(toIndentedString(conf)).append("\n");
    sb.append("    dependency: ").append(toIndentedString(dependency)).append("\n");
    sb.append("    deployRequest: ").append(toIndentedString(deployRequest)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    isLatestVersion: ").append(toIndentedString(isLatestVersion)).append("\n");
    sb.append("    jar: ").append(toIndentedString(jar)).append("\n");
    sb.append("    latestVersion: ").append(toIndentedString(latestVersion)).append("\n");
    sb.append("    mainClass: ").append(toIndentedString(mainClass)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    restUrl: ").append(toIndentedString(restUrl)).append("\n");
    sb.append("    sqlText: ").append(toIndentedString(sqlText)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    versionName: ").append(toIndentedString(versionName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
