/*
 * spark
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.spark.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.spark.model.DependencyFordescribeApplicationInstanceOutput;
import com.volcengine.spark.model.DeployRequestFordescribeApplicationInstanceOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DescribeApplicationInstanceResponse
 */


public class DescribeApplicationInstanceResponse {
  @SerializedName("AccountId")
  private String accountId = null;

  @SerializedName("AppDraftId")
  private Long appDraftId = null;

  @SerializedName("ApplicationName")
  private String applicationName = null;

  @SerializedName("ApplicationTrn")
  private String applicationTrn = null;

  @SerializedName("ApplicationType")
  private String applicationType = null;

  @SerializedName("Args")
  private String args = null;

  @SerializedName("Cluster")
  private String cluster = null;

  @SerializedName("Conf")
  private Map<String, String> conf = null;

  @SerializedName("Dependency")
  private DependencyFordescribeApplicationInstanceOutput dependency = null;

  @SerializedName("DeployRequest")
  private DeployRequestFordescribeApplicationInstanceOutput deployRequest = null;

  @SerializedName("DeploymentId")
  private String deploymentId = null;

  @SerializedName("Duration")
  private Long duration = null;

  @SerializedName("EndTime")
  private String endTime = null;

  @SerializedName("EngineVersion")
  private String engineVersion = null;

  @SerializedName("Image")
  private String image = null;

  @SerializedName("InstanceId")
  private String instanceId = null;

  @SerializedName("Jar")
  private String jar = null;

  @SerializedName("LastCheckTime")
  private String lastCheckTime = null;

  @SerializedName("MainClass")
  private String mainClass = null;

  @SerializedName("ProjectId")
  private String projectId = null;

  @SerializedName("RestUrl")
  private String restUrl = null;

  @SerializedName("SqlText")
  private String sqlText = null;

  @SerializedName("StartTime")
  private String startTime = null;

  @SerializedName("State")
  private String state = null;

  @SerializedName("UniqueKey")
  private String uniqueKey = null;

  @SerializedName("UserId")
  private String userId = null;

  @SerializedName("VersionId")
  private Long versionId = null;

  public DescribeApplicationInstanceResponse accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @Schema(description = "")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public DescribeApplicationInstanceResponse appDraftId(Long appDraftId) {
    this.appDraftId = appDraftId;
    return this;
  }

   /**
   * Get appDraftId
   * @return appDraftId
  **/
  @Schema(description = "")
  public Long getAppDraftId() {
    return appDraftId;
  }

  public void setAppDraftId(Long appDraftId) {
    this.appDraftId = appDraftId;
  }

  public DescribeApplicationInstanceResponse applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

   /**
   * Get applicationName
   * @return applicationName
  **/
  @Schema(description = "")
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }

  public DescribeApplicationInstanceResponse applicationTrn(String applicationTrn) {
    this.applicationTrn = applicationTrn;
    return this;
  }

   /**
   * Get applicationTrn
   * @return applicationTrn
  **/
  @Schema(description = "")
  public String getApplicationTrn() {
    return applicationTrn;
  }

  public void setApplicationTrn(String applicationTrn) {
    this.applicationTrn = applicationTrn;
  }

  public DescribeApplicationInstanceResponse applicationType(String applicationType) {
    this.applicationType = applicationType;
    return this;
  }

   /**
   * Get applicationType
   * @return applicationType
  **/
  @Schema(description = "")
  public String getApplicationType() {
    return applicationType;
  }

  public void setApplicationType(String applicationType) {
    this.applicationType = applicationType;
  }

  public DescribeApplicationInstanceResponse args(String args) {
    this.args = args;
    return this;
  }

   /**
   * Get args
   * @return args
  **/
  @Schema(description = "")
  public String getArgs() {
    return args;
  }

  public void setArgs(String args) {
    this.args = args;
  }

  public DescribeApplicationInstanceResponse cluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

   /**
   * Get cluster
   * @return cluster
  **/
  @Schema(description = "")
  public String getCluster() {
    return cluster;
  }

  public void setCluster(String cluster) {
    this.cluster = cluster;
  }

  public DescribeApplicationInstanceResponse conf(Map<String, String> conf) {
    this.conf = conf;
    return this;
  }

  public DescribeApplicationInstanceResponse putConfItem(String key, String confItem) {
    if (this.conf == null) {
      this.conf = new HashMap<String, String>();
    }
    this.conf.put(key, confItem);
    return this;
  }

   /**
   * Get conf
   * @return conf
  **/
  @Schema(description = "")
  public Map<String, String> getConf() {
    return conf;
  }

  public void setConf(Map<String, String> conf) {
    this.conf = conf;
  }

  public DescribeApplicationInstanceResponse dependency(DependencyFordescribeApplicationInstanceOutput dependency) {
    this.dependency = dependency;
    return this;
  }

   /**
   * Get dependency
   * @return dependency
  **/
  @Valid
  @Schema(description = "")
  public DependencyFordescribeApplicationInstanceOutput getDependency() {
    return dependency;
  }

  public void setDependency(DependencyFordescribeApplicationInstanceOutput dependency) {
    this.dependency = dependency;
  }

  public DescribeApplicationInstanceResponse deployRequest(DeployRequestFordescribeApplicationInstanceOutput deployRequest) {
    this.deployRequest = deployRequest;
    return this;
  }

   /**
   * Get deployRequest
   * @return deployRequest
  **/
  @Valid
  @Schema(description = "")
  public DeployRequestFordescribeApplicationInstanceOutput getDeployRequest() {
    return deployRequest;
  }

  public void setDeployRequest(DeployRequestFordescribeApplicationInstanceOutput deployRequest) {
    this.deployRequest = deployRequest;
  }

  public DescribeApplicationInstanceResponse deploymentId(String deploymentId) {
    this.deploymentId = deploymentId;
    return this;
  }

   /**
   * Get deploymentId
   * @return deploymentId
  **/
  @Schema(description = "")
  public String getDeploymentId() {
    return deploymentId;
  }

  public void setDeploymentId(String deploymentId) {
    this.deploymentId = deploymentId;
  }

  public DescribeApplicationInstanceResponse duration(Long duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @Schema(description = "")
  public Long getDuration() {
    return duration;
  }

  public void setDuration(Long duration) {
    this.duration = duration;
  }

  public DescribeApplicationInstanceResponse endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @Schema(description = "")
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }

  public DescribeApplicationInstanceResponse engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

   /**
   * Get engineVersion
   * @return engineVersion
  **/
  @Schema(description = "")
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }

  public DescribeApplicationInstanceResponse image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @Schema(description = "")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public DescribeApplicationInstanceResponse instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

   /**
   * Get instanceId
   * @return instanceId
  **/
  @Schema(description = "")
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }

  public DescribeApplicationInstanceResponse jar(String jar) {
    this.jar = jar;
    return this;
  }

   /**
   * Get jar
   * @return jar
  **/
  @Schema(description = "")
  public String getJar() {
    return jar;
  }

  public void setJar(String jar) {
    this.jar = jar;
  }

  public DescribeApplicationInstanceResponse lastCheckTime(String lastCheckTime) {
    this.lastCheckTime = lastCheckTime;
    return this;
  }

   /**
   * Get lastCheckTime
   * @return lastCheckTime
  **/
  @Schema(description = "")
  public String getLastCheckTime() {
    return lastCheckTime;
  }

  public void setLastCheckTime(String lastCheckTime) {
    this.lastCheckTime = lastCheckTime;
  }

  public DescribeApplicationInstanceResponse mainClass(String mainClass) {
    this.mainClass = mainClass;
    return this;
  }

   /**
   * Get mainClass
   * @return mainClass
  **/
  @Schema(description = "")
  public String getMainClass() {
    return mainClass;
  }

  public void setMainClass(String mainClass) {
    this.mainClass = mainClass;
  }

  public DescribeApplicationInstanceResponse projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @Schema(description = "")
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }

  public DescribeApplicationInstanceResponse restUrl(String restUrl) {
    this.restUrl = restUrl;
    return this;
  }

   /**
   * Get restUrl
   * @return restUrl
  **/
  @Schema(description = "")
  public String getRestUrl() {
    return restUrl;
  }

  public void setRestUrl(String restUrl) {
    this.restUrl = restUrl;
  }

  public DescribeApplicationInstanceResponse sqlText(String sqlText) {
    this.sqlText = sqlText;
    return this;
  }

   /**
   * Get sqlText
   * @return sqlText
  **/
  @Schema(description = "")
  public String getSqlText() {
    return sqlText;
  }

  public void setSqlText(String sqlText) {
    this.sqlText = sqlText;
  }

  public DescribeApplicationInstanceResponse startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @Schema(description = "")
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }

  public DescribeApplicationInstanceResponse state(String state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @Schema(description = "")
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }

  public DescribeApplicationInstanceResponse uniqueKey(String uniqueKey) {
    this.uniqueKey = uniqueKey;
    return this;
  }

   /**
   * Get uniqueKey
   * @return uniqueKey
  **/
  @Schema(description = "")
  public String getUniqueKey() {
    return uniqueKey;
  }

  public void setUniqueKey(String uniqueKey) {
    this.uniqueKey = uniqueKey;
  }

  public DescribeApplicationInstanceResponse userId(String userId) {
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @Schema(description = "")
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }

  public DescribeApplicationInstanceResponse versionId(Long versionId) {
    this.versionId = versionId;
    return this;
  }

   /**
   * Get versionId
   * @return versionId
  **/
  @Schema(description = "")
  public Long getVersionId() {
    return versionId;
  }

  public void setVersionId(Long versionId) {
    this.versionId = versionId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeApplicationInstanceResponse describeApplicationInstanceResponse = (DescribeApplicationInstanceResponse) o;
    return Objects.equals(this.accountId, describeApplicationInstanceResponse.accountId) &&
        Objects.equals(this.appDraftId, describeApplicationInstanceResponse.appDraftId) &&
        Objects.equals(this.applicationName, describeApplicationInstanceResponse.applicationName) &&
        Objects.equals(this.applicationTrn, describeApplicationInstanceResponse.applicationTrn) &&
        Objects.equals(this.applicationType, describeApplicationInstanceResponse.applicationType) &&
        Objects.equals(this.args, describeApplicationInstanceResponse.args) &&
        Objects.equals(this.cluster, describeApplicationInstanceResponse.cluster) &&
        Objects.equals(this.conf, describeApplicationInstanceResponse.conf) &&
        Objects.equals(this.dependency, describeApplicationInstanceResponse.dependency) &&
        Objects.equals(this.deployRequest, describeApplicationInstanceResponse.deployRequest) &&
        Objects.equals(this.deploymentId, describeApplicationInstanceResponse.deploymentId) &&
        Objects.equals(this.duration, describeApplicationInstanceResponse.duration) &&
        Objects.equals(this.endTime, describeApplicationInstanceResponse.endTime) &&
        Objects.equals(this.engineVersion, describeApplicationInstanceResponse.engineVersion) &&
        Objects.equals(this.image, describeApplicationInstanceResponse.image) &&
        Objects.equals(this.instanceId, describeApplicationInstanceResponse.instanceId) &&
        Objects.equals(this.jar, describeApplicationInstanceResponse.jar) &&
        Objects.equals(this.lastCheckTime, describeApplicationInstanceResponse.lastCheckTime) &&
        Objects.equals(this.mainClass, describeApplicationInstanceResponse.mainClass) &&
        Objects.equals(this.projectId, describeApplicationInstanceResponse.projectId) &&
        Objects.equals(this.restUrl, describeApplicationInstanceResponse.restUrl) &&
        Objects.equals(this.sqlText, describeApplicationInstanceResponse.sqlText) &&
        Objects.equals(this.startTime, describeApplicationInstanceResponse.startTime) &&
        Objects.equals(this.state, describeApplicationInstanceResponse.state) &&
        Objects.equals(this.uniqueKey, describeApplicationInstanceResponse.uniqueKey) &&
        Objects.equals(this.userId, describeApplicationInstanceResponse.userId) &&
        Objects.equals(this.versionId, describeApplicationInstanceResponse.versionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, appDraftId, applicationName, applicationTrn, applicationType, args, cluster, conf, dependency, deployRequest, deploymentId, duration, endTime, engineVersion, image, instanceId, jar, lastCheckTime, mainClass, projectId, restUrl, sqlText, startTime, state, uniqueKey, userId, versionId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeApplicationInstanceResponse {\n");
    
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    appDraftId: ").append(toIndentedString(appDraftId)).append("\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    applicationTrn: ").append(toIndentedString(applicationTrn)).append("\n");
    sb.append("    applicationType: ").append(toIndentedString(applicationType)).append("\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    conf: ").append(toIndentedString(conf)).append("\n");
    sb.append("    dependency: ").append(toIndentedString(dependency)).append("\n");
    sb.append("    deployRequest: ").append(toIndentedString(deployRequest)).append("\n");
    sb.append("    deploymentId: ").append(toIndentedString(deploymentId)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    jar: ").append(toIndentedString(jar)).append("\n");
    sb.append("    lastCheckTime: ").append(toIndentedString(lastCheckTime)).append("\n");
    sb.append("    mainClass: ").append(toIndentedString(mainClass)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    restUrl: ").append(toIndentedString(restUrl)).append("\n");
    sb.append("    sqlText: ").append(toIndentedString(sqlText)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    uniqueKey: ").append(toIndentedString(uniqueKey)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
