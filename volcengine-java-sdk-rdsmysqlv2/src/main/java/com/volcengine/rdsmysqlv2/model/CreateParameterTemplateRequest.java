/*
 * rds_mysql_v2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.rdsmysqlv2.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.rdsmysqlv2.model.CustomParamForCreateParameterTemplateInput;
import com.volcengine.rdsmysqlv2.model.TemplateParamForCreateParameterTemplateInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CreateParameterTemplateRequest
 */


public class CreateParameterTemplateRequest {
  @SerializedName("CustomParams")
  private List<CustomParamForCreateParameterTemplateInput> customParams = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("TemplateCategory")
  private String templateCategory = null;

  @SerializedName("TemplateDesc")
  private String templateDesc = null;

  @SerializedName("TemplateName")
  private String templateName = null;

  @SerializedName("TemplateParams")
  private List<TemplateParamForCreateParameterTemplateInput> templateParams = null;

  @SerializedName("TemplateType")
  private String templateType = null;

  @SerializedName("TemplateTypeVersion")
  private String templateTypeVersion = null;

  public CreateParameterTemplateRequest customParams(List<CustomParamForCreateParameterTemplateInput> customParams) {
    this.customParams = customParams;
    return this;
  }

  public CreateParameterTemplateRequest addCustomParamsItem(CustomParamForCreateParameterTemplateInput customParamsItem) {
    if (this.customParams == null) {
      this.customParams = new ArrayList<CustomParamForCreateParameterTemplateInput>();
    }
    this.customParams.add(customParamsItem);
    return this;
  }

   /**
   * Get customParams
   * @return customParams
  **/
  @Valid
  @Schema(description = "")
  public List<CustomParamForCreateParameterTemplateInput> getCustomParams() {
    return customParams;
  }

  public void setCustomParams(List<CustomParamForCreateParameterTemplateInput> customParams) {
    this.customParams = customParams;
  }

  public CreateParameterTemplateRequest projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public CreateParameterTemplateRequest templateCategory(String templateCategory) {
    this.templateCategory = templateCategory;
    return this;
  }

   /**
   * Get templateCategory
   * @return templateCategory
  **/
  @Schema(description = "")
  public String getTemplateCategory() {
    return templateCategory;
  }

  public void setTemplateCategory(String templateCategory) {
    this.templateCategory = templateCategory;
  }

  public CreateParameterTemplateRequest templateDesc(String templateDesc) {
    this.templateDesc = templateDesc;
    return this;
  }

   /**
   * Get templateDesc
   * @return templateDesc
  **/
 @Size(max=200)  @Schema(description = "")
  public String getTemplateDesc() {
    return templateDesc;
  }

  public void setTemplateDesc(String templateDesc) {
    this.templateDesc = templateDesc;
  }

  public CreateParameterTemplateRequest templateName(String templateName) {
    this.templateName = templateName;
    return this;
  }

   /**
   * Get templateName
   * @return templateName
  **/
 @Size(min=2,max=64)  @Schema(description = "")
  public String getTemplateName() {
    return templateName;
  }

  public void setTemplateName(String templateName) {
    this.templateName = templateName;
  }

  public CreateParameterTemplateRequest templateParams(List<TemplateParamForCreateParameterTemplateInput> templateParams) {
    this.templateParams = templateParams;
    return this;
  }

  public CreateParameterTemplateRequest addTemplateParamsItem(TemplateParamForCreateParameterTemplateInput templateParamsItem) {
    if (this.templateParams == null) {
      this.templateParams = new ArrayList<TemplateParamForCreateParameterTemplateInput>();
    }
    this.templateParams.add(templateParamsItem);
    return this;
  }

   /**
   * Get templateParams
   * @return templateParams
  **/
  @Valid
  @Schema(description = "")
  public List<TemplateParamForCreateParameterTemplateInput> getTemplateParams() {
    return templateParams;
  }

  public void setTemplateParams(List<TemplateParamForCreateParameterTemplateInput> templateParams) {
    this.templateParams = templateParams;
  }

  public CreateParameterTemplateRequest templateType(String templateType) {
    this.templateType = templateType;
    return this;
  }

   /**
   * Get templateType
   * @return templateType
  **/
  @Schema(description = "")
  public String getTemplateType() {
    return templateType;
  }

  public void setTemplateType(String templateType) {
    this.templateType = templateType;
  }

  public CreateParameterTemplateRequest templateTypeVersion(String templateTypeVersion) {
    this.templateTypeVersion = templateTypeVersion;
    return this;
  }

   /**
   * Get templateTypeVersion
   * @return templateTypeVersion
  **/
  @Schema(description = "")
  public String getTemplateTypeVersion() {
    return templateTypeVersion;
  }

  public void setTemplateTypeVersion(String templateTypeVersion) {
    this.templateTypeVersion = templateTypeVersion;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateParameterTemplateRequest createParameterTemplateRequest = (CreateParameterTemplateRequest) o;
    return Objects.equals(this.customParams, createParameterTemplateRequest.customParams) &&
        Objects.equals(this.projectName, createParameterTemplateRequest.projectName) &&
        Objects.equals(this.templateCategory, createParameterTemplateRequest.templateCategory) &&
        Objects.equals(this.templateDesc, createParameterTemplateRequest.templateDesc) &&
        Objects.equals(this.templateName, createParameterTemplateRequest.templateName) &&
        Objects.equals(this.templateParams, createParameterTemplateRequest.templateParams) &&
        Objects.equals(this.templateType, createParameterTemplateRequest.templateType) &&
        Objects.equals(this.templateTypeVersion, createParameterTemplateRequest.templateTypeVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customParams, projectName, templateCategory, templateDesc, templateName, templateParams, templateType, templateTypeVersion);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateParameterTemplateRequest {\n");
    
    sb.append("    customParams: ").append(toIndentedString(customParams)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    templateCategory: ").append(toIndentedString(templateCategory)).append("\n");
    sb.append("    templateDesc: ").append(toIndentedString(templateDesc)).append("\n");
    sb.append("    templateName: ").append(toIndentedString(templateName)).append("\n");
    sb.append("    templateParams: ").append(toIndentedString(templateParams)).append("\n");
    sb.append("    templateType: ").append(toIndentedString(templateType)).append("\n");
    sb.append("    templateTypeVersion: ").append(toIndentedString(templateTypeVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
