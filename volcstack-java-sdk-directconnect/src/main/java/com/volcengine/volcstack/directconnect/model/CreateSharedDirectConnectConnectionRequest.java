/*
 * directconnect
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.volcstack.directconnect.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CreateSharedDirectConnectConnectionRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-05-13T17:16:28.121303+08:00[Asia/Shanghai]")
public class CreateSharedDirectConnectConnectionRequest {
  @SerializedName("Bandwidth")
  private Integer bandwidth = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("DirectConnectConnectionId")
  private String directConnectConnectionId = null;

  @SerializedName("SharedDirectConnectConnectionName")
  private String sharedDirectConnectConnectionName = null;

  @SerializedName("UserAccountId")
  private String userAccountId = null;

  @SerializedName("VlanId")
  private Integer vlanId = null;

  public CreateSharedDirectConnectConnectionRequest bandwidth(Integer bandwidth) {
    this.bandwidth = bandwidth;
    return this;
  }

   /**
   * Get bandwidth
   * minimum: 50
   * maximum: 1000
   * @return bandwidth
  **/
  @NotNull
 @Min(50) @Max(1000)  @Schema(required = true, description = "")
  public Integer getBandwidth() {
    return bandwidth;
  }

  public void setBandwidth(Integer bandwidth) {
    this.bandwidth = bandwidth;
  }

  public CreateSharedDirectConnectConnectionRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CreateSharedDirectConnectConnectionRequest directConnectConnectionId(String directConnectConnectionId) {
    this.directConnectConnectionId = directConnectConnectionId;
    return this;
  }

   /**
   * Get directConnectConnectionId
   * @return directConnectConnectionId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getDirectConnectConnectionId() {
    return directConnectConnectionId;
  }

  public void setDirectConnectConnectionId(String directConnectConnectionId) {
    this.directConnectConnectionId = directConnectConnectionId;
  }

  public CreateSharedDirectConnectConnectionRequest sharedDirectConnectConnectionName(String sharedDirectConnectConnectionName) {
    this.sharedDirectConnectConnectionName = sharedDirectConnectConnectionName;
    return this;
  }

   /**
   * Get sharedDirectConnectConnectionName
   * @return sharedDirectConnectConnectionName
  **/
  @Schema(description = "")
  public String getSharedDirectConnectConnectionName() {
    return sharedDirectConnectConnectionName;
  }

  public void setSharedDirectConnectConnectionName(String sharedDirectConnectConnectionName) {
    this.sharedDirectConnectConnectionName = sharedDirectConnectConnectionName;
  }

  public CreateSharedDirectConnectConnectionRequest userAccountId(String userAccountId) {
    this.userAccountId = userAccountId;
    return this;
  }

   /**
   * Get userAccountId
   * @return userAccountId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getUserAccountId() {
    return userAccountId;
  }

  public void setUserAccountId(String userAccountId) {
    this.userAccountId = userAccountId;
  }

  public CreateSharedDirectConnectConnectionRequest vlanId(Integer vlanId) {
    this.vlanId = vlanId;
    return this;
  }

   /**
   * Get vlanId
   * @return vlanId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public Integer getVlanId() {
    return vlanId;
  }

  public void setVlanId(Integer vlanId) {
    this.vlanId = vlanId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSharedDirectConnectConnectionRequest createSharedDirectConnectConnectionRequest = (CreateSharedDirectConnectConnectionRequest) o;
    return Objects.equals(this.bandwidth, createSharedDirectConnectConnectionRequest.bandwidth) &&
        Objects.equals(this.description, createSharedDirectConnectConnectionRequest.description) &&
        Objects.equals(this.directConnectConnectionId, createSharedDirectConnectConnectionRequest.directConnectConnectionId) &&
        Objects.equals(this.sharedDirectConnectConnectionName, createSharedDirectConnectConnectionRequest.sharedDirectConnectConnectionName) &&
        Objects.equals(this.userAccountId, createSharedDirectConnectConnectionRequest.userAccountId) &&
        Objects.equals(this.vlanId, createSharedDirectConnectConnectionRequest.vlanId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidth, description, directConnectConnectionId, sharedDirectConnectConnectionName, userAccountId, vlanId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSharedDirectConnectConnectionRequest {\n");
    
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    directConnectConnectionId: ").append(toIndentedString(directConnectConnectionId)).append("\n");
    sb.append("    sharedDirectConnectConnectionName: ").append(toIndentedString(sharedDirectConnectConnectionName)).append("\n");
    sb.append("    userAccountId: ").append(toIndentedString(userAccountId)).append("\n");
    sb.append("    vlanId: ").append(toIndentedString(vlanId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
